//
//  Hanoitower.swift
//  十大常见算法
//
//  Created by Tate on 2021/10/11.
//

import Foundation

/**
 分治算法的基本步骤
 分治法在每一层递归上都有三个步骤：
 1) 分解：将原问题分解为若干个规模较小，相互独立，与原问题形式相同的子问题
 2) 解决：若子问题规模较小而容易被解决则直接解，否则递归地解各个子问题
 3) 合并：将各个子问题的解合并为原问题的解。
 */


/**
 汉诺塔游戏的演示和思路分析:
 1) 如果是有一个盘， A->C 如果我们有 n >= 2 情况，我们总是可以看做是两个盘 1.最下边的盘 2. 上面的盘
 2) 先把 最上面的盘 A->B
 3) 把最下边的盘 A->C
 4) 把 B 塔的所有盘 从 B->C
 */

//汉诺塔的移动的方法
//使用分治算法
func hanoiTower(num:Int,a:String,b:String,c:String) {
    //如果只有一个盘
    if num == 1 {
        print("第 1 个盘从 \(a)->\(c)")
    }else{
        //如果我们有 n >= 2 情况，我们总是可以看做是两个盘 1.最下边的一个盘 2. 上面的所有盘
        //1. 先把 最上面的所有盘 A->B， 移动过程会使用到 c
        hanoiTower(num: num - 1, a: a, b: c, c: b)
        //2. 把最下边的盘 A->C
        print("第 \(num) 个盘从 \(a)->\(c)")
        //3. 把 B 塔的所有盘 从 B->C , 移动过程使用到 a 塔
        hanoiTower(num: num - 1, a: b, b: a, c: c)
    }
}

